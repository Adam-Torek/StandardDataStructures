#include <cstddef>
#include <cstring>
#include <initializer_list>
#include <data_structures/utils/comp>
#include <algorithm>

namespace ds::linear
{
    template<typename static_array>
    class array_iterator {
        public:
            using value_type = typename static_array::value_type;
            using pointer_type = value_type*;
            using reference_type = value_type&;
            using difference_type = std::ptrdiff_t;
            using iterator_category = std::random_access_iterator_tag;

            array_iterator(pointer_type ptr): itr_ptr(ptr) {};
            array_iterator(const array_iterator& other) = default;
            ~array_iterator() = default;

            array_iterator& operator=(const array_iterator& other) = default;

            array_iterator& operator=(pointer_type ptr) 
            {
                itr_ptr = ptr; 
                return *this;
            }

            array_iterator& operator-=(const difference_type& n) {
                itr_ptr -= n;
                return *this;
            }

            array_iterator& operator+=(const difference_type& n) {
                itr_ptr += n;
                return *this;
            }

            array_iterator& operator++() {
                itr_ptr++;
                return *this;
            }           

            array_iterator& operator--() {
                itr_ptr--;
                return *this;
            }

            array_iterator operator++(int) {
                array_iterator temp = *this;
                ++(*this);
                return temp;
            }

            array_iterator operator--(int) {
                array_iterator temp = *this;
                --(*this);
                return temp;
            }

            reference_type operator*() const {
                return *itr_ptr;
            }

            pointer_type operator->() const {
                return &itr_ptr;
            }

            reference_type operator[](const difference_type& n) {
                return *(itr_ptr+n);
            }

            difference_type operator-(const array_iterator& other) const {
                return itr_ptr-other.get_ptr();
            }

            array_iterator operator-(const int& n) const {
                pointer_type old_ptr = itr_ptr;
                itr_ptr -= n;
                array_iterator temp = *this;
                itr_ptr = old_ptr;
                return temp;
            }

            array_iterator operator+(const int& n) const {
                pointer_type old_ptr = itr_ptr;
                itr_ptr += n;
                array_iterator temp = *this;
                itr_ptr = old_ptr;
                return temp;
            }

            bool operator==(const array_iterator& other) const {
                return itr_ptr == other.itr_ptr;
            }

            bool operator!=(const array_iterator& other) const {
                return  itr_ptr != other.itr_ptr;
            }

            bool operator>(const array_iterator& other) const {
                return itr_ptr > other.itr_ptr;
            }

            bool operator<(const array_iterator& other) const {
                return itr_ptr < other.itr_ptr;
            }

            bool operator<=(const array_iterator& other) const {
                return itr_ptr <= other.itr_ptr;
            }

            bool operator>=(const array_iterator& other) const {
                return itr_ptr >= other.itr_ptr;
            }

            pointer_type get_ptr() {
                return itr_ptr;
            }

            void set_ptr(pointer_type ptr) {
                itr_ptr = ptr;
            }

        protected:
            pointer_type itr_ptr;
    };

    template <typename static_array>
    class reverse_array_iterator: public array_iterator<static_array> 
    {
        public: 
            using value_type = typename static_array::value_type;
            using pointer_type = value_type*;
            using reference_type = value_type&;
            using difference_type = std::ptrdiff_t;
            using iterator_category = std::random_access_iterator_tag;

            reverse_array_iterator(pointer_type ptr): array_iterator<static_array>(ptr){}
            reverse_array_iterator(const reverse_array_iterator& other) = default;
            reverse_array_iterator(const array_iterator<static_array>& other) {
                this->itr_ptr = other->get_ptr();
            }

            ~reverse_array_iterator() = default;

            reverse_array_iterator& operator=(const reverse_array_iterator& other) = default;
            reverse_array_iterator& operator=(const array_iterator<static_array>& other) {
                this->itr_ptr = other->get_ptr();
                return *this;
            }

            reverse_array_iterator& operator=(const pointer_type ptr) {
                this->itr_ptr = ptr;
                return *this;
            }

            reverse_array_iterator& operator-=(const difference_type& n) {
                this->itr_ptr += n;
                return *this;
            }

             reverse_array_iterator& operator+=(const difference_type& n) {
                this->itr_ptr -= n;
                return *this;
            }


            reverse_array_iterator& operator++() {
                --this->itr_ptr; 
                return *this;
            }

            reverse_array_iterator operator++(int) {
                reverse_array_iterator temp = *this;
                ++(*this); 
                return temp;
            }

            reverse_array_iterator& operator--() {
                ++this->itr_ptr; 
                return *this;
            }

            reverse_array_iterator operator--(int) {
                reverse_array_iterator temp = *this;
                --(*this); 
                return temp;
            }

            reverse_array_iterator operator-(const int& n) const {
                pointer_type old_ptr = this->itr_ptr;
                this->itr_ptr += n;
                reverse_array_iterator temp = *this;
                this->itr_ptr = old_ptr;
                return temp;
            }

            reverse_array_iterator operator+(const int& n) const {
                pointer_type old_ptr = this->itr_ptr;
                this->itr_ptr -= n;
                reverse_array_iterator temp = *this;
                this->itr_ptr = old_ptr;
                return temp;
            }

            difference_type operator-(const reverse_array_iterator& other) {
                return this->get_ptr() - other->get_ptr();
            }

            array_iterator<static_array> base() {
                array_iterator<static_array> itr = array_iterator<static_array>(this->itr_ptr);
                ++itr;
                return itr;
            }

    };

    template<typename T, unsigned int SIZE>
    class static_array {
       
        private: 
            T arr[SIZE];

            void copy_elements(const T* other) {
                for(unsigned int i = 0; i < SIZE; i++) {
                    arr[i] = other[i];
                }
            }

            void copy_elements(const std::initializer_list<T>& other) {
                unsigned int i = 0;
                for(const T& element : other) {
                    arr[i] = element;
                    i++;
                }
            }
            
        public:
            using value_type = T;
            using pointer_type = value_type*;
            using reference_type = value_type&;
            using iterator = array_iterator<static_array<value_type, SIZE>>;
            using const_iterator = array_iterator<static_array<const value_type, SIZE>>;
            using reverse_iterator = reverse_array_iterator<static_array<value_type, SIZE>>;
            using const_reverse_iterator = reverse_array_iterator<static_array<const value_type, SIZE>>;

            static_array() {
                if(SIZE > 0) {
                     memset(arr, 0, sizeof(T)*(SIZE-1) );
                }               
            }

            static_array(const std::initializer_list<T>& lst) {
               copy_elements(lst);
            }

            static_array(const static_array<T, SIZE>& other) {
                copy_elements(other.data());
            }

            static_array<T, SIZE>& operator=(const std::initializer_list<T>& lst) {
                copy_elements(lst);
            }

            static_array<T, SIZE>& operator=(const static_array<T, SIZE>& other) {
                copy_elements(other);
            }

            const unsigned int size() const {
                return SIZE;
            }

            const unsigned int max_size() const {
                return SIZE;
            }

            bool empty() const {
                return SIZE == 0;
            }

            pointer_type data() {
                return arr;
            }

            const pointer_type data() const {
                return const_cast<T*>(arr);
            }

            reference_type front() {
                return arr[0];
            }

            reference_type back() {
                if(SIZE > 0) {
                    return arr[SIZE-1];
                }
                else {
                    return arr[0];
                }
            }

            reference_type at(unsigned int index) {
                return arr[index];
            }

            const reference_type at(unsigned int index) const {
                return arr[index];
            }

            reference_type operator[](unsigned int index) {
                return at(index);
            }

            const reference_type operator[](unsigned int index) const {
                return at(index);
            }

            iterator begin() {
                return iterator(&arr[0]);
            }

            iterator end() {
                return iterator(&arr[SIZE]);
                
            }

            const_iterator cbegin() const {
                return const_iterator(&arr[0]);
            }

            const_iterator cend() const {
                return const_iterator(&arr[SIZE]);
            }

            reverse_iterator rbegin() {
                return reverse_iterator(&arr[SIZE-1]);
            }

            reverse_iterator rend() {
                return reverse_iterator(&arr[-1]);
            }

            const_reverse_iterator rcbegin() {
                return const_reverse_iterator(&arr[SIZE-1]);
            }

            const_reverse_iterator rcend() {
                return const_reverse_iterator(&arr[-1]);
            }

             void fill(const T& d) {
                for(int i = 0; i < SIZE; i++) {
                    arr[i] = d;
                }
            }

            void swap(static_array<T, SIZE>& other) {
                T* d = other.data();
                for(int i = 0; i < SIZE; i++) {
                    std::swap(this.arr[i], d[i]);
                }
            }

        };

        template<typename T, unsigned int SIZE> 
        void swap(const static_array<T,SIZE>& left, const static_array<T,SIZE>& right)
        {
            left.swap(right);
        }

        template<typename T, unsigned int SIZE>
        bool operator<(const static_array<T, SIZE>& left, const static_array<T, SIZE>& right) {
                return ds::utils::lexicographical_compare(left.cbegin(), left.cend(), right.cbegin(), right.cend());
        }

        template<typename T, unsigned int SIZE>
        bool operator>(const static_array<T, SIZE>& left, const static_array<T, SIZE>& right) {
            return right < left;
        }

        template<typename T, unsigned int SIZE>
        bool operator<=(const static_array<T, SIZE>& left, const static_array<T, SIZE>& right) {
            return !(left < right);
        }

        template<typename T, unsigned int SIZE>
        bool operator>=(const static_array<T, SIZE>& left, const static_array<T, SIZE>& right) {
            return !(right < left);
        }

        template<typename T, unsigned int SIZE>
        bool operator==(const static_array<T, SIZE>& left, const static_array<T, SIZE>& right) {
            return ds::utils::equal(left.cbegin(), left.cend(), right.cbegin());
        }

        template<typename T, unsigned int SIZE>
        bool operator!=(const static_array<T, SIZE>& left, const static_array<T, SIZE>& right) {
            return !(left == right);
        }
} // namespace ds::linear
